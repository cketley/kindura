package uk.ac.kcl.kindura;

import uk.ac.kcl.kindura.UploadCollection;
import uk.ac.kcl.kindura.StorageProvider;
import uk.ac.kcl.kindura.StorageProviderConstraint;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;

////////////////////////////////////////////////////////////////
// Define the appraisal periods for different funding situations
// First set of rules defines periods for project funding
rule "Institutional funder appraisal period"
salience 100
when
    collection: UploadCollection( project.funder == "Institutional" )
then
    collection.setAppraisalDate( 6 );
end

rule "AHRC funder appraisal period"
salience 100
when
    collection: UploadCollection( project.funder == "AHRC" )
then
    collection.setAppraisalDate( 3 );
end

rule "ESRC funder appraisal period"
salience 100
when
    collection: UploadCollection( project.funder == "ESRC" )
then
    collection.setAppraisalDate( 10 );
end


rule "EPSRC funder appraisal period"
salience 100
when
    collection: UploadCollection( project.funder == "EPSRC" )
then
    collection.setAppraisalDate( 10 );
end


rule "Combination funder appraisal period"
salience 100
when
    collection: UploadCollection( project.funder == "Combination" )
then
    collection.setAppraisalDate( 10 );
end

rule "Unfunded funder appraisal period"
salience 100
when
    collection: UploadCollection( project.funder == "Unfunded" )
then
    collection.setAppraisalDate( 5 );
end

rule "Other funder appraisal period"
salience 100
when
    collection: UploadCollection( project.funder == "Other" )
then
    collection.setAppraisalDate( 3 );
end

///////////////////////////////////////////////////////////////////////////
// Now a set of rules for specifying appraisal period on a collection basis
// These must overrule the project defaults, hence the lower salience
rule "AHRC accession appraisal period"
salience 50
when
    collection: UploadCollection( funder == "AHRC" )
then
    collection.setAppraisalDate( 3 );
end

rule "ESRC accession appraisal period"
salience 50
when
    collection: UploadCollection( funder == "ESRC" )
then
    collection.setAppraisalDate( 10 );
end

rule "EPSRC accession appraisal period"
salience 50
when
    collection: UploadCollection( funder == "EPSRC" )
then
    collection.setAppraisalDate( 10 );
end

rule "Combination accession appraisal period"
salience 50
when
    collection: UploadCollection( funder == "Combination" )
then
    collection.setAppraisalDate( 10 );
end

rule "Unfunded accession appraisal period"
salience 50
when
    collection: UploadCollection( funder == "Unfunded" )
then
    collection.setAppraisalDate( 3 );
end

rule "Other accession appraisal period"
salience 50
when
    collection: UploadCollection( funder == "Other" )
then
    collection.setAppraisalDate( 3 );
end

///////////////////////////////////////////////////////////////
// Version checks
// These define the required number of copies of the data which must be stored

rule "First version"
salience 100
when
    collection: UploadCollection( version == "First version" )
then
    collection.setMinCopies(4);
end

rule "Milestone version"
salience 100
when
    collection: UploadCollection( version == "Milestone version" )
then
    collection.setMinCopies(3);
end

rule "Publisher submitted version"
salience 100
when
    collection: UploadCollection( version == "Publisher submitted version" )
then
    collection.setMinCopies(3);
end

rule "Publisher's proof"
salience 100
when
    collection: UploadCollection( version == "Publisher's proof" )
then
    collection.setMinCopies(3);
end

rule "Work in progress"
salience 100
when
    collection: UploadCollection( version == "Work in progress" )
then
    collection.setMinCopies(2);
end

rule "Derived data"
salience 100
when
    collection: UploadCollection( version == "Derived data" )
then
    collection.setMinCopies(2);
end

rule "Final version"
salience 100
when
    collection: UploadCollection( version == "Final version" )
then
    collection.setMinCopies(4);
end

//////////////////////////////////////////////////////////////
// Data type checks
// These rules remove potential storage providers from the list
// in response to the type of data in the collection
rule "Research type"
salience 100
when
    collection: UploadCollection( type != "Research" )
then
    collection.limitStorage( StorageProviderConstraintEnum.REGION, "Local" );
end

////////////////////////////////////////////////////////////
// Data sensitivity checks
// These rules specify geograhpical constraints on storage
rule "Medical sensitivity"
salience 100
when
    collection: UploadCollection( sensitivity == "Medical" )
then
    collection.limitStorage( StorageProviderConstraintEnum.REGION, "EU" );
end

rule "Financial sensitivity"
dialect "mvel"
salience 100
when
    collection: UploadCollection( sensitivity == "Financial" )
then
    collection.limitStorage( StorageProviderConstraintEnum.REGION, "EEC" );
end

rule "Employment details sensitivity"
salience 100
when
    collection: UploadCollection( sensitivity == "Employment details" )
then
    collection.limitStorage( StorageProviderConstraintEnum.REGION, "EEC" );
end

rule "Other sensitivity"
salience 100
when
    collection: UploadCollection( sensitivity == "Other" )
then
    collection.limitStorage( StorageProviderConstraintEnum.REGION, "EEC" );
end

/////////////////////////////////////////////////////////
// Access frequency rules
// These choose appropriate storage tiers
rule "Daily access"
salience 100
when
    collection: UploadCollection( frequency == "Daily" )
then
    collection.addTier( StorageProviderTier.TIER1 );
end

rule "More than weekly access"
salience 100
when
    collection: UploadCollection( frequency == "Weekly plus" )
then
    collection.addTier( StorageProviderTier.TIER1 );
    collection.addTier( StorageProviderTier.TIER2 );
end

rule "Monthly access"
salience 100
when
    collection: UploadCollection( frequency == "Monthly" )
then
    collection.addTier( StorageProviderTier.TIER3 );
end

rule "Infrequent access"
salience 100
when
    collection: UploadCollection( frequency == "Infrequent" )
then
    collection.addTier( StorageProviderTier.TIER4 );
end

/////////////////////////////////////////////////////////

